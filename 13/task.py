from dataclasses import dataclass, field
from abc import ABC, abstractmethod
from typing import Generic, Iterator, TypeVar, cast
from enum import IntEnum, auto


TSignal = TypeVar("TSignal", bound='Signal')


class CompareResult(IntEnum):
    Less = auto()
    Equal = auto()
    Greater = auto()
    LeftRanOutOfItems = auto()
    RightRanOutOfItems = auto()
    
    def __bool__(self):
        return self == CompareResult.Less or self == CompareResult.Equal or self == CompareResult.LeftRanOutOfItems
    
    def __str__(self):
        if self == CompareResult.Less:
            return "Left less than right"
        elif self == CompareResult.Equal:
            return "Left equal to right"
        elif self == CompareResult.Greater:
            return "Left greater than right"
        elif self == CompareResult.RightRanOutOfItems:
            return "Right ran out of items"
        elif self == CompareResult.LeftRanOutOfItems:
            return "Left ran out of items"

        raise ValueError(self)
    

class ComparisonPrinter:
    def __init__(self, verbose: bool = True) -> None:
        self.__level = 0
        self.__verbose = verbose
        
    def __enter__(self) -> 'ComparisonPrinter':
        self.__level = self.__level + 1
        return self
    
    def __exit__(self,  exc_type, exc_value, exc_traceback) -> bool:
        self.__level = self.__level - 1
        return False
    
    def __call__(self, message: str) -> None:
        if not self.__verbose:
            return
        prefix = "  " * self.__level
        print(f"{prefix}{message}")
        
    def right_ran_out_of_items(self) -> None:
        self(str(CompareResult.RightRanOutOfItems))
        

printer = ComparisonPrinter(False)


class SignalComparer(Generic[TSignal], ABC):
    def __init__(self, signal: TSignal) -> None:
        self.__signal = signal
        
    @property
    def signal(self) -> TSignal:
        return self.__signal
    
    @abstractmethod
    def compare(self, another: 'SignalComparer') -> CompareResult:
        raise NotImplementedError()


class Signal(ABC):
    @abstractmethod
    def as_str(self) -> str:
        raise NotImplementedError()
    
    @abstractmethod
    def get_comparer(self) -> SignalComparer:
        raise NotImplementedError()


class EmptySignalComparer(SignalComparer['EmptySignal']):
    def compare(self, another: SignalComparer) -> CompareResult:
        another_signal = another.signal
        printer(f"- Compare {self.signal.as_str()} vs. {another_signal.as_str()}")
        if (isinstance(another_signal, EmptySignal)):
            return CompareResult.Equal
        
        return CompareResult.LeftRanOutOfItems
    
    
class ListSignalComparer(SignalComparer['ListSignal']):
    def compare(self, another: SignalComparer) -> CompareResult:
        another_signal = another.signal
        printer(f"- Compare {self.signal.as_str()} vs. {another_signal.as_str()}")
        with printer:
            if (isinstance(another_signal, ListSignal)):
                list_signal = cast(ListSignal, another_signal)
            elif isinstance(another_signal, EmptySignal):
                with printer:
                    printer.right_ran_out_of_items()
                return CompareResult.RightRanOutOfItems
            else:
                list_signal = ListSignal([another_signal])    
            result = self.__compare_lists(self.signal, list_signal)
            return result
            
    def __compare_lists(self, left: 'ListSignal', right: 'ListSignal') -> CompareResult:
        result = CompareResult.Equal
        index = 0
        while (result == CompareResult.Equal):
            if (index >= len(left.signals)):
                if index < len(right.signals):
                    return CompareResult.LeftRanOutOfItems
                
                return result
            
            left_item = left.signals[index]
            if index >= len(right.signals):
                with printer:
                    printer.right_ran_out_of_items()
                return CompareResult.RightRanOutOfItems
            
            right_item = right.signals[index]
            
            result = left_item.get_comparer().compare(right_item.get_comparer())
            if not bool(result):
                return result
            
            index = index + 1
            
        return result
    
    def sort(self) -> list[Signal]:
        signals = self.signal.signals[:]
        signals = ListSignalComparer.__bubble_sort(signals)
        return signals
    
    @staticmethod
    def __bubble_sort(signals: list[Signal]) -> list[Signal]:
        i = len(signals) - 1
        swapped = True
        while swapped:
            swapped = False
            for i in range(0, len(signals) - 1):
                left = signals[i].get_comparer()
                right = signals[i+1].get_comparer()
                is_in_right_order = bool(left.compare(right))
                if not is_in_right_order:
                    tmp = signals[i]
                    signals[i] = signals[i+1]
                    signals[i+1] = tmp
                    swapped = True
        print([s.as_str() for s in signals])
        return signals
    
    
class ValueSignalComparer(SignalComparer['ValueSignal']):
    def compare(self, another: SignalComparer) -> CompareResult:
        another_signal = another.signal
        printer(f"- Compare {self.signal.as_str()} vs. {another_signal.as_str()}")
        if (isinstance(another_signal, ValueSignal)):
            value_signal = cast(ValueSignal, another_signal)
            if self.signal.value < value_signal.value:
                return CompareResult.Less
            elif self.signal.value == value_signal.value:
                return CompareResult.Equal
            
            return CompareResult.Greater
        
        if (isinstance(another, ListSignalComparer)):
            return ListSignal([self.signal]).get_comparer().compare(another)
        
        return False


@dataclass
class EmptySignal(Signal):
    def as_str(self) -> str:
        return "[]"
    
    def get_comparer(self) -> SignalComparer:
        return EmptySignalComparer(self)


@dataclass
class ValueSignal(Signal):
    value: int = field()

    def as_str(self) -> str:
        return str(self.value)
    
    def get_comparer(self) -> SignalComparer:
        return ValueSignalComparer(self)


@dataclass
class ListSignal(Signal):
    signals: list[Signal] = field(default_factory=list)
    
    def as_str(self) -> str:
        inner = ",".join([s.as_str() for s in self.signals])
        return f"[{inner}]"
    
    def get_comparer(self) -> SignalComparer:
        return ListSignalComparer(self)


@dataclass
class SignalPair:
    left: Signal = field(default=None)
    right: Signal = field(default=None)
    
    def as_str(self) -> str:
        return f"{self.left.as_str()}\n{self.right.as_str()}\n"


@dataclass
class SignalList:
    signals: list[SignalPair] = field(default_factory=list)
    
    def as_str(self) -> str:
        return "\n".join([p.as_str() for p in self.signals])
    
    def flatten(self) -> list[Signal]:
        return [s for s in self.__flatten()]
    
    def __flatten(self) -> Iterator[Signal]:
        for sp in self.signals:
            yield sp.left
            yield sp.right
 

class LineParser:
    TERMINALS = ("[", "]", ",")
    
    def __init__(self, line: str) -> None:
        self.__line = line
        self.__cursor: int = 0
        self.__signals: list[list[Signal]] = []
        
    @property
    def line(self) -> str:
        return self.__line
    
    @property
    def remainder(self) -> str:
        return self.__line[self.__cursor:]
    
    @property
    def current(self) -> str:
        return self.__line[self.__cursor]
    
    @property
    def next(self) -> str:
        return self.__line[self.__cursor + 1] if self.__cursor + 1 < len(self.__line) else ""
        
    def parse(self) -> Signal:
        if self.__references_empty():
            return self.__parse_empty()
        elif self.__references_list():
            with self:
                return self.__parse_list()
        elif self.__references_value():
            return self.__parse_value()
        
        raise ValueError(f"Invalid position: {self.remainder}")
        
    def __references_empty(self) -> bool:
        return self.current == "[" and self.next == "]"
    
    def __references_value(self) -> bool:
        return self.current not in self.TERMINALS
    
    def __references_list(self) -> bool:
        return self.current == "["
    
    def __parse_empty(self) -> Signal:
        self.__cursor = self.__cursor + 2
        return EmptySignal()
    
    def __parse_value(self) -> Signal:
        marker = self.__cursor
        while self.__line[marker] not in self.TERMINALS:
            marker = marker + 1
            if marker >= len(self.__line):
                raise ValueError("END OF LINE")
        
        token = self.__line[self.__cursor:marker]
        value = int(token)
        self.__cursor = marker
        
        return ValueSignal(value)
    
    def __parse_list(self) -> Signal:
        while self.current not in ("]"):
            signal: Signal = self.parse()
            self.__signals[-1].append(signal)
            if self.current == ",":
                self.__cursor = self.__cursor + 1
            
        return ListSignal(self.__signals[-1])
    
    def __enter__(self) -> 'Parser':
        self.__signals.append([])
        self.__cursor = self.__cursor + 1
        return self
    
    def __exit__(self, exc_type, exc_value, exc_traceback) -> bool:
        if exc_value is not None:
            return False
        
        if self.current != "]":
            error = ValueError(f"Not at the end of a list: {self.remainder}")
            if exc_value is not None:
                raise error from exc_value
            raise error
        
        self.__cursor = self.__cursor + 1
        self.__signals.pop()
        return True
    

class SignalPairComparer:
    def __init__(self, pair: SignalPair) -> None:
        self.__pair = pair
        
    def compare(self) -> bool:
        left_comparer = self.__pair.left.get_comparer()
        right_comparer = self.__pair.right.get_comparer()
        result = left_comparer.compare(right_comparer)
        printer(f"  Compare result: {result} ({bool(result)})")
        return bool(result)
    
    
class SignalListComparer:
    def __init__(self, signals: SignalList) -> None:
        self.__signals = signals
        
    def compare(self) -> list[int]:
        return [index + 1 for index in range(len(self.__signals.signals)) if SignalPairComparer(self.__signals.signals[index]).compare()]
    
    
def parse_signal(value: str) -> Signal:
    parser = LineParser(value)
    return parser.parse()


def parse_signal_list(value: str) -> SignalList:
    left: Signal = None
    right: Signal = None
    signal_pairs: list[SignalPair] = []
    
    for index, line in enumerate(value.splitlines()):
        cursor = index % 3
        if cursor == 0:
            left = parse_signal(line)
        elif cursor == 1:
            right = parse_signal(line)
            pair = SignalPair(left, right)
            left = None
            signal_pairs.append(pair)
        elif cursor == 2:
            continue
    
    return SignalList(signal_pairs)


def run_regular(value: str) -> None:
    signal_list = parse_signal_list(value)
    list_as_str = signal_list.as_str()
    assert value.strip() == list_as_str.strip()
    
    comparer = SignalListComparer(signal_list)
    indices = comparer.compare()
    sum_of_indices = sum(indices)
    print(sum_of_indices)
    
    
def run_with_dividers(value: str) -> None:
    divider_two = ListSignal([ListSignal([ValueSignal(2)])])
    divider_six = ListSignal([ListSignal([ValueSignal(6)])])
    
    signal_list = parse_signal_list(value)
    list_as_str = signal_list.as_str()
    assert value.strip() == list_as_str.strip()
    
    all_signals = signal_list.flatten()
    all_signals.append(divider_two)
    all_signals.append(divider_six)
    list_signal = ListSignal(all_signals)
    comparer = cast(ListSignalComparer, list_signal.get_comparer())
    sorted_signals = comparer.sort()
    
    # print("\n".join([s.as_str() for s in sorted_signals]))
    
    indices = []
    for i, signal in enumerate(sorted_signals):
        if signal is divider_two or signal is divider_six:
            indices.append(i + 1)

    assert len(indices) == 2
    print(indices[0] * indices[1])
    

def run(value: str) -> None:
    run_regular(value)
    run_with_dividers(value)
    
    
SAMPLE = """[1,1,3,1,1]
[1,1,5,1,1]

[[1],[2,3,4]]
[[1],4]

[9]
[[8,7,6]]

[[4,4],4,4]
[[4,4],4,4,4]

[7,7,7,7]
[7,7,7]

[]
[3]

[[[]]]
[[]]

[1,[2,[3,[4,[5,6,7]]]],8,9]
[1,[2,[3,[4,[5,6,0]]]],8,9]"""

PUZZLE = """[[[2],3,[],[]]]
[[6,9,1,3,[[2,9],4,8,[9,2,1]]],[],[[3],3]]

[[7,[10,[3,2,6],10,[10],[4,8,7,4,7]]],[9,8,8,7]]
[[3,9],[2,2,[6,[1,8],[10,7,8]],[[1,9,8],[],[],[2,4,2],[3]]],[8,[],[[7]]]]

[[2,[6,1,0]],[],[]]
[[[9],[[1,4],[1,10,9,2,6],6,2],4,[[10,9,3,8],6]],[[10,[]],[[1,8],6,6,7,0],[[1,9],0,4,[3],[8,8,8,10]]],[],[8,6,3,[5]],[[10],[[6,4,2,0],6,1,8,0],0,[[9],[3,4,0,5],[10]]]]

[[2,7],[1,[4,[9,9,6]],0]]
[[[[5,2]],10,5]]

[[4,2,[2,[6]],5],[],[[[8],[6,10]],4,5,[[10,0],[10,1,9,10]]]]
[[[[3,10,2,9,10],8,[4,5,5],1],[1,4,[6,4,9],[],8]],[10,2],[[0,[4,3,1,5],[2,6,2,1,6],6,[1,1]],7]]

[[[5,2,[7,9,3,2,7],4,[1,3,0,7]]],[[],[[0,0,10],[7],[10,3,0,9]]],[[8,7,6,4],10,[[1,1,0,9,2],[],[6]]],[1,[],4,10,[]],[8,0,5]]
[[[[10,6,4],[7,2]],7,[[8,9,7,6,5],2,8]],[],[[6,8,8,[7,6,1]]],[[7,5,[6],[2,7,10,4,6],[6,7,9]],[[2,0,2,3,6],[4,1,6,7,0]],[0,0,7,2,1],[[8,7],6,[4],6,1]],[[],[],[[],[9,5,4,8,3]],2]]

[[[5,[4,10,6,9],2,[4,10,9,6,4],[5,2,9,5]]],[],[[1],[[10,6,6,5,10]],6,1]]
[[[[2,8,6],8,6,4],[[1],8,9]],[10,[],[[2,5],[10],[5,1,6,3]]],[3,[]]]

[[[[10,5,5,5,4]],8],[6,[[6,7,8],[3,2,5,4,6],3,5],1,[[5,7],10,8],[9,7]],[[[],[1,5,3,9],2,10]],[],[]]
[[[7,10,6,[2],8]],[2,[],[10,[0,2,6]]]]

[[[10,9,[],3]],[[10],[7,[5,8],9]],[[0],[[4,5,1],[5]],[[]],4,[[9],4,1]]]
[[[[],8,[1,6]],[7]],[],[[7,[6,8],0,5,0],[2,6],[[6,4,7,1]],9]]

[[[],[[5],[6,9]]],[]]
[[5],[],[[8,[5],2],[2,0,[7],[8,2,1]],[1,[4,9,3],[8,1,3,1,4],[]],6,2]]

[[[[5,3,10,4,10],[5,7],[5,9,2,5,1]]],[[[1],[2],8],10,9,4,[[5,5,7,4],1,[8,9,8]]],[2,[2,8],[7,7,7,0,4]]]
[[9,4,[5],[]],[3,2,[5],[]],[[[],[4,8],10],8,[]],[7,[[7],7],[[1,4,6,4,7]],[]],[]]

[[9],[[3,4,9,8],10,1],[9,[[8,2],2,2,[1,5]]],[[[1],[6]],2],[4,7,[3],[6,6],6]]
[[[3,[5,0]],[[3],[5,5,10,0],[],[5,8,7]],3]]

[[1,[1]],[],[10,[3,[5,8],9,[2,1,9],[7,4]],6,[[1],[4,10]],[5,[5,2]]],[[5,9],[8],6]]
[[8,7,[0,[],10],[6]],[1],[[[9,6,9,7,8],9,[8,8,10,1,0],3,0],[2,2,[10,2],0,7]]]

[[[[10,4,6,3],[1,6,2]],[],7]]
[[8,1],[5,[[],[8,9,10,1]],5]]

[[],[[4,0,[3,4,4,10,1]],2,[[3,3,3,5,3],3,8],5,10],[6]]
[[[2,4,6,[9,3],[]]],[4,[1,[8,10,3,5,2],[10,3,9],8,[7,7,3,8,4]],[4,3],10]]

[[3,[8,7,[6,1,5,7]],[9,[],[0,10],[2,1,2,4]],[[2,1,7,2],0,9,8,9],[[3,1,0],10]]]
[[3,[6,9,4],[[2,1,10],8],10],[5,7,3,[[3,8]]],[6,[8,3,3,8],7,10,5]]

[[[3,3,1],0,8,[3,[7,10,0,6],[7,9,10,7,10],4,1]],[[[],[],9],[9,5,[3,2,7,8],[7]],[[10,3],3],[8,5,[5,6,2,7,0]]],[10,6],[[9,[1]],9,[[1]]]]
[[[[4],0,6,[8,3,7,6,2],5],10,[2,[0,5],[8,10,10,10,8],1,[2,2]]],[[[4,9,1,6]],[[9,1,3,10,0],7]],[1,7,4,4,[]],[]]

[[4,[1]]]
[[[[6,2,10,9,10],10],[[7,7,0,7,10],1,7,8],[9,[2,7,0,4]],10]]

[[9],[[4,[8],[4,6,6],10]],[[3],[7,8,7,7]],[[[10,7,3,2,2]],[[],[],4,1,[6,4,10,10]],7,5,[7,5,0,10,[1,5,7]]]]
[[[[8,8,9,8],[],[9,3,3]]],[8,[2],5,7,8]]

[[[],[[],9,[0,4]]],[],[],[0,[1,[1]],[6,5,[3,10,1,0,6]],2,6]]
[[6,[[4,4],1,[6]],[[5,5],[],4],7]]

[[],[6,[[8],[7,3,3,6],3,8,[]]],[[0],[],6,[5,10,2,2]],[[0,3,0],2,[[9],2],3],[9,[9],7,2,[6,[],[0,9],1,[0]]]]
[[3,[2,[10,3,0,6],0],1,9],[2,[[6]],[],[[1,1],7,[5,6,4,2],7,8],[0,[5,8,4],[]]]]

[[5,7,[[7,7,6],7,5,[3,3,10,5]],3,6]]
[[[[0,5,7]],0,[[8,7,9,1,5]],4],[[],[7,1,[10,9,7,3]],1,2,0],[[[]],[5,9],[10,2,[8,6,7,4],[]]]]

[[9,[]],[[[8,2],[6,4,9,4,9],2],[4,6,9,9],2],[[],4,[[6,2,6],[4,4,9,0],[9,9,6],[2],9],[],1],[[[3,9,0],4],6,[]],[[],4]]
[[[],[]]]

[[0],[[[9,7,7],[3]]],[4,4],[],[6,5,[8,5,[3],[3,2,10,10,8],[6]]]]
[[[3,[3,9,9],9,[0],10]],[],[[],[],[]],[[0,[5,6,3,3,4]],3,7],[[[0,4,5,2,0],10],9,9,[[0,1],6,3]]]

[[6,2],[[]],[1,5,9,[[0,8,3,5,0],[8,8,10],4,9,3],[2,[8,9],[9,8,5,0,3]]]]
[[2,1,5,5,9],[4,7],[[[9],[4,0,4,0],3,[]],3,[2],2,5]]

[[[[]],[7,2],[0,[4,1],3],10],[[9],3],[[],9,[5,[2]],5],[0,[[3],[],[9,7,5],3,2],[5],[5]]]
[[[[9,9],3,8,3],[10,[1,6,7,6,0],3,6,[10,10]],5],[],[1,[9,9,5,3],[2,[5,5,3,8,8],3,[1,7],0]]]

[[],[[7,6],[[3],[],3,[0,9],[1]],0,[6]],[6,[[10,8,5,4],3]],[]]
[[[[],[0,1,9],1,[3],7],0,[2,[2,4,1,0,9]],[[6,3,3,3,5]],[4]],[],[],[1,[],[],5,[[],1,1,[3]]]]

[[3],[[[],5,[3,1,7,2],[10,10,5],[9,4,4,7,2]]],[8,[],8,[[2]],8]]
[[],[[3,[0,6,7]],7,7],[2,6,[2,[],[]],[],[[1,9,2,6,9],[6],[9,6,3,1],4,[]]],[6,9,[[8,10,8,5,7],[6],[3]],5],[[[5,4,6],1,[1,10,9,2,2]],[[9,8,10],9,3,[2,4,1,10,0],[4]],6,7]]

[[10,5],[],[[[4,3,5],[10],[10]],10,8,2,[]],[[]],[5,0]]
[[[],6,[5,10]],[[4,3,[9,1,10,0,10],[6]],[[0,2,6,5]],7,[2,7,[],7,[7,8,3,2]]],[[7,[5,4,8,4],0,4,[8]],3]]

[[[[10,2,1],[3],3],[[3,6],[3,10,2,8],[],6],8,[[],8,8]],[[[2,5,0,9],10],[[8,8,0,2],[6],[8]],[[10],[5,7,8]],10],[[6],9],[[[],[4,2,9,3,10],0,[2],9]]]
[[[[0,6,6,2],[6,9,6,6,1]],[[],5],6,0],[[[4,9,1,3,0]],7,3,2],[8,[],10,[[9],[3,8],0,[8,1,10]]],[[[5,8],[1,6,0,6]]],[[1,8,8,[4,1,10,3]],[[8,1,4,6,1],[],[6,0,1,8],0],7,6,[2,[2,4,4,9,0],10,[]]]]

[[[[5],1,[],1,1],[[3,10,6,4],2,[6,8,2],7],[7,[7,0,8,10,8],1],10,1],[[[9,7],10,[7],8],[8,[9,10,6,10],0,[1,10]],[[],[10,3,4],[8,3,0,7,7],[6,8],3],1],[4,[[],[0,2,1,6],[],10,[9,10,5,9,0]],[6,[5],[6,10,0,5,7],[2,6,0,8],[]]]]
[[9,8]]

[[0,[]],[[5],10,5,[[4,10,8]]],[[],[[],[8,1,7],2],[[4]],4],[[],[]],[7,[2,6],9,[3,[2,4,4,3],7]]]
[[7,3,7,[2,6,[0,1,10,3],[7]],10],[],[]]

[[5,10,1,[[0,4,4,3],[7,4,8,2,8],0]]]
[[],[10,[],[[8,10,9,7,0],0,7,9]]]

[[8,[7,[5]]],[7,9,[8,9,[5,3],1,10]]]
[[6,2,[[7,4,6],1,6,[3]]],[5,6,4,[[3,3,5,3]]],[7,[]],[9],[4]]

[[0,[[1],10,3,8,9],6]]
[[[6,1],0,5],[7,[[9,9],3],[]],[[5,4,[0,10,4,9]],10,5,[[9,5,2,8,8],8,2,[1,9,1,1,10]]]]

[[9],[[[],[1,9,9,0,6],[9,1,7,5,0]],4,5,3],[[],[[9,9,10,3],2,[],6,0]],[]]
[[[],2,7],[[1,7,[4,2],8],10]]

[[3,9,5,7,8],[],[6,9],[9,[],7]]
[[[[10],8,0,[3,7,5,5]]],[0,[5,1,[10,1,1],[6]]],[[[2,8,6],[1,4,6],[5,1],[6,3]]],[[0,7,0],[6,[8,2,0,2],[8,9],[7,10,9,1]],[7,2,7,[2,3,1,4],[2]]],[[[],[],[3,4,4,1],[8]],5,4]]

[[10,5],[],[[[3,10],1,[6,4,0],5,4],6,[[],4,[0],[7,7,7,2]],[10],5],[1,[[9,0]]],[9,1,4,4,4]]
[[0,6,[[0,6,9]]],[],[3,[9,5,[4,7,0],[2,6,0,1,4],[2,3]],9,3,[[9,10,1]]],[[2,0],[5,[10,2],[0,7]],0,[[4,7],[4,1,6],0,[1,3]]]]

[[9,9,5,0,10],[],[[6],1],[9,6,[],[[6,3,9],[],4,[1,4],7]],[6,[2,[4,2],[4]],[4,[2,6],[1,10,9,4]],0,[]]]
[[],[5,9,5,[[1,3,6,1,9],4,10,1,1],[3]],[]]

[[1,1],[7,[[9,8],[]],5],[[[7,8,7],8,[6,0],[2,3,6],[5,8,10]],9,10],[[8,7,[6,5,8,4,9]],[[2,3],2,7,3],[]],[7]]
[[[[0,8,8,4,6],[7,7,10,9],10,[8,9,3,5],4],[[8,7,6,7]],[5,8,[]]],[],[[0,0,1]],[],[8,[],4]]

[[3,[[],[],[10,5,7,1]],8,1,[[1,5,1,10],[8,9,8,6,6],[0,5,8],2,8]],[9,7,[10,5]],[[[],[5,0,7,8,0],7],[8,8]],[5,[1,8,6,[3,3]]]]
[[[[3,8,4],[],[1,3,5,10,6],8],1,[5,[4,9,2,8,4],[8]],[[5,10,4],3,6,8,[1,10,8]]]]

[[3,[9,[4,4],[6],6],9,10,5],[],[[0,0,[8,4]],0],[8,[5,[1,2]],0,3,0],[]]
[[10,[],[7],[[1,7]]],[],[[[8,1,0],1,9]]]

[[[[8,6,1],5,[1,10,1],[1],0],[0,6,[],[9]],9,[[2,5,7,7,4]],1],[1,3,1],[[[10,9,7,8],8,[8,8,10],[]],[9,[8,3,5,6,10],7],[8,9,[3,8,4,1,3],[9],1],1,2]]
[[[],2,10,[[],7,4,6,4],[[],8,3,[2],4]],[7,2,4,10],[[[],1,[3,4,3,10]]]]

[[],[10,[4,[3,4,0,5],6,8],[[8,5,1,6,1],5],[7],[[6],[10,7,5,1],[],2]],[[5,[1],8,10,8],[],[[1,2,9,3],[3],[1,0,0,0]],10],[[[5,7,1,8]]]]
[[[[10]],[8,7,[7,3,7,1,9],2,6],[[]]],[6],[],[[[],3]]]

[0,3,2,5]
[0,3,2,5,5]

[[[2,2,[5,8],[]],9,9,6,8],[[5,4],[7,[9,5,3,9,1],[0,6,9],9]],[7,[[4,2]],[5],[[6],[6,0,5],[]]],[]]
[[9,9,[[],0,[2,1,4,10]]],[[[10,8],[4,10]],[[10,4],0],5,0]]

[[[[5,10,8,8],10],[[10],8]],[10,[5],[8]]]
[[3,7,1,4,[10,6,7,4]],[[]]]

[[[7,[5,6,8]],[6,8]],[[]],[9],[[[],[3,3,6,10,0]]]]
[[10,[[3],9,9,8,5],7],[[],[],2,[[],3],[[0,0,7,0]]],[4,[8,8,[9,3],[7],3],2],[[8,[9,7,5],[8]],[3]],[0,1,6,[]]]

[[8,2,[[6,8,4],[0,1]],0,1],[1,8,[9,[9,9,4,5],[4,3,6,7,7],[9,9,10,6,0],[7,8]]]]
[[7,7],[10,[],1]]

[[]]
[[],[1],[9,[]]]

[[1,9,9,0],[0,[],2],[[6,[6,4,8],[10,6,2,8],[8,4,1],9]],[[[9,3]],0,[10,5,9,6,10],[10,[2,0,2,2]],10]]
[[1,9]]

[[[2,5,[6,3,3,7]],[10,[0,1,0,2,1]],1]]
[[10,9,6],[2,[],[10,[9,6,2,0,0],5,1,[]]],[[[5,7,4],[1,0,8,5,7],[4,6,3,8]],[0,6,[5,7,5],7,5],[[1,6],[0,9,0,7,6],[],8,2]],[[0,[5]]]]

[[7,[[8,1,1,8],1,[7,6,5,2],[9],8],[[2,8,0,2,2]]],[4],[],[7,[[9]],[[0,10]]]]
[[[[9],[7,0,1],[10,10],2,5],[[],0,2,[7,10,1]],[[10,2,8],[8,9],1],[],[10,0]],[5],[10,[[7,4,7,10],6,[],5,9],[7,[1,0,4],[10,6,3,7],10,[7,4]],[[1,4],[],1]]]

[[],[6],[[4,[],4,5,[]],[[],[7,8,0,7,3],[2,9],4],9,[7,[4,4,3,6,6],[4,1,0,4,3]]],[9,3]]
[[[2,7,3]]]

[[0,[0],[[8,4],1,3,6,6],6],[4,9]]
[[],[2],[0,2],[[0,2],[3],7,2],[4,7,8,7,[2,7,3,[8,8,6,7],[4,8,6]]]]

[[[[],[7]],[]],[3,[2,[5,0,10,10,7],0],5,6],[[],9,10],[[[3,3,2,9,7],0,[1,4]]],[]]
[[6,2,[[0,10,8],3,4,[9],10],2,[[1,10,2,10],8,10]],[]]

[[[[]],4,[[2,1,1,4],[9],0,6],9,9]]
[[],[[10],[]],[[[6,2,1,9]]],[[[2],6,10,[7]],4,9,[[0,7,8,4],1,4]],[7,[8],[8],10,9]]

[[10,7,3,[[8,8,2,9]]],[[],5,[9],[]]]
[[7,[9,3,[10],2],5,7,9],[4,[[8],2,7],[[8,1,3,8]],[7,7,3,[2,1,8,0],6],[]],[],[[[]],5],[[],[],7,7,7]]

[[[[],[8,5],0],[5,[],[],9,[9,5]],10,7]]
[[10,[5,[1,5,3,7,2],4,5,7],[0,[],[9,5,9,2,9],5,7],0],[8,5],[1,[1,[1],[2,5,2,2],[4],7],[9,[7,0]],4]]

[[[2],[[7],5,[9,8],4,[6,5,1]],4,[[0,3,9,6]]]]
[[3,[2,3,[],10],[],2,[4,[6,8,4],[]]],[[[1,1,9,8],[9,8,9]],[[2,1],6,[9,9,10,10]],2],[5,[[0,0],8],6,[[7],3,3,6],1],[9,[[],[3,8,2,1]]],[3,0,[5,[1],[5,8,6,7,3],8]]]

[[[],4,[[5,3,8,2,2],[5,3],[],[]],[0]],[7,[0,7],[[4],[0,10,0,9,5],4],[[3,6,4],7,[2,9,10,10,9]]]]
[[9,8],[6,4,2],[0,5]]

[[],[[4],2,6,1,[[2,10,0]]]]
[[9,7,[8,[5],[7,2,8],[3,10,4,5]]]]

[[[[10]],1,5,9,2],[],[7,8,[3,10,6,10]],[3],[[],[1,2,[0,2,6],[10,6]],5]]
[[10,5,[9,[0,9,3,10,2]],8,6],[2,7,[[2,5],2,[2,4,4,9,3],4]]]

[[],[6,[3,[7,3,9,8,9],[2,6]],3],[]]
[[[[4,3,3,1,5],[1,2,4],9],9,9,2,[]],[[7,6,1],1,10,7],[[]]]

[[[]],[[0,[],1],[[9,9]]],[],[[[5,6,1,6,1]],1],[2,[6,[4,1,9,7],[7,6],9,[7]],9,9,[[8,3]]]]
[[2],[],[[6]],[[2],[[4,6,10,4,5],10,5,[2,1],9],[[10],[0,9,8],[7,1,7,5]],[],[[1,4,9,5],5,[3],[10,1,9,10,6]]]]

[[6,[[9,0],[],[3,10,6,6],8,10]],[[1,1,8,5],[],3,1],[],[0,2,[3,1,[2]]]]
[[[8,0,10,[5,10]],[[],10,4],[8],[2]],[[[7,7,9,2,0],[1,3,5,10,10],1],[[]]]]

[[3,7,[],10],[5,5,5,5,7]]
[[[],[9,0,[3,7,10]],[[1,0],[5,9,10,6],9],9],[[[0],0,10,10],[0,[2,7]],[[],10]],[]]

[[[[],[2,10,10],0],[1]],[]]
[[6,6],[7,1,[[5,10,6,6],5,[]],[],1],[[],6,10,[2,5]],[7,[[8],[],[],0]]]

[[9,[[4,2,3,3,8],4,[8,9],[1,2,8],[0,5,7,4]],2,[[8,6,10],4]],[],[[9],[[],[],9],5],[],[6,[],[[6,9,1]],4]]
[[[8,2,5,10,1]]]

[[0,7,1,6],[[10,[8],[5,9,10],8],1,7,[6,[10,10],[10,3,3,10,2],3,[4,6]]],[7,[[4,1,6,3,10],[0,2],9],[[5,8,3,5,2],4],[[10],[],9,[2,1]]],[5,[[1,7,6],[3,8,1,5]],9,[5,[1,3,0,1],[4,6,2],[],[10,10,2]]],[10,2,[1],[5,[7],[5,8,4],0,8]]]
[[[9,10],3,1],[],[]]

[[[[6,6,2,1],10,[3],[5],6],4,[[9]],0,[]],[9,[0,[],1,5],10,[]],[]]
[[[[9],5,9,1,0],1,5],[[10,[10,8,4,1]]],[8,4,1,[4]]]

[[],[6]]
[[7,7,[],[],[[8,7,3]]],[[3,[7,4],[0,0,6,10,5]]],[9,7],[[0,0,4,[8,2,2,1,8]],[[]],[8,[7,3,0,5,0],0,[3,6,7],6],9]]

[[[[],9],[[7,8],[9,4],[4]],[1,7,2],10],[1]]
[[8],[[6,5,9,[0,9]],4],[]]

[[6,[10,1,[],4],[2,[3,9,1,5],8,4,9],[4,1,1]],[[5,[]],[[7,0,9,5,5],[]]],[8,9,[4,[3,4,9,10,0],1]],[],[[4,[1,3,7,10,1],1],[[9,1,8,6,2]],10,9]]
[[9,[8,[2,5,1,0,5],9],[[4,8],4,8,0],[2]],[[3,[6]]],[[[5],8,2,4],[[],[7,1,0]],3],[[[3,7],4,[8,9,0,2,3],[4,5]],1]]

[[[4,[4,5,0,2],9,[0,6,6]],7,7,6,10],[[[2,5,8],0,0],1,[6]],[7],[2,0,5],[0,10]]
[[2,[4,9,5,7,[6,5,5]],[3,4],8,5]]

[[[[],6,[3,7,5],[4,6],[0,0,0,6,1]]],[[[],10,10,[6,2,9,7,10],[]]],[1,[[],9,9],[5,7,[1],6],[[10,2]]],[],[[4]]]
[[9,[7,6,[9,3,0,3,5]]],[8],[2,3,0]]

[[[8],[[5,10],[4,9,10,10],8,0,2],[6,8,0,6]],[9,2],[],[7,[4]]]
[[[],6,8,[]],[[[0,9],[]],5,[[5,5,8],[6],7,2]],[],[7]]

[[5],[[[],[9,5],[8,4,3],[3,4,1,6,10]],0,0,[[10,10,3,9,10]],[[8],6,[5,2,3,5,2]]]]
[[[[],[5],6],5,0,5,5],[0,10],[]]

[[[1,[4,8]]]]
[[[[],6],6,[4,9],3,[]],[[[],[5,6,8,3],1,2],4,10,[[5],8,[2,9,9,2,7],[1,0,9]]],[[[7,7,7]],10,[10,9,5,[3,0],10],[[10,4]],6],[2,[0],3,[4,[],9],5],[[],3,3,[9,6,[0,0]]]]

[[],[[]],[6],[1,[[0,0,3,1,0],6,2,0]]]
[[[9,8,[7,5],10,10],9,7],[],[9],[[3,[3],2,[7,7,3],7],1,[4,7,5]]]

[[5,8,[[10,1,5],[1,2],6,[8,9,9,6,0],[2,0,9,3,7]],9,8],[[],9,[2]]]
[[[5,[],[9,5,10,3,4]],4,2],[],[[1,[9,4],[0]],9,3]]

[[3,0,9,[8,9,[4,2]]],[[[2,6,7,8],3,[]],10,6],[[7],[9,[9,8]],[[7,3,3],10,[0]],3],[2,[[5,7,0],[8,6,5],[3,7]],[]]]
[[4],[[0,[1,4,9,0,7],[0]],4,4],[0,[[10,8,0],9,[],1],[[3,2,2,8],8,6],[3]],[],[[7,1,8,1],0]]

[[2,0,5,[[9,3],[9,5]],4],[[[4],[8,2,9,6,3],[10,9,2,7,5],6],[[],[1],2,0,10],8,10],[[5],3,10,[8,2,[5,4,7,0],6]]]
[[6,1,[[8],[5,2,6,0,3]],[[7,6,0]]],[[[],4,[4,7],0,8],7,9],[[[0,0,10],[3,10,10],[],[9,1,6,0]],[[]],6,8,6]]

[[3,5,3,4],[[5,[],8,10,[8,9]],[[4,10,4,9],2],[8],[3],9],[1,[[1],[4,1,0,2,10],10,2,1],[[3,4,0],6],[],[[2,2,9,10],5,[7,2,6,8],[10]]]]
[[],[3,[],[4,[6,0,2],3,[6,4],[3]],[10,[9,0,3,7]]],[],[3,[2,0,[2,9,6,4,10]],9]]

[[8,8,[6,[],[]],0,6],[],[4,[],8,[0,1,3],[5,[0,4]]],[[[9],1,0,[4,1]],[],0,4,[6,7,[2,4,9]]]]
[[6,0,0,5,[]]]

[[5,[[5,1,1,7,5],7],[5,[6,8],[5,9]],[[10,6,7],[],[],[],0],[9]],[9,6,[[9,9,0],[7,5,4,8,3]],[[2,8],8,3,[3,0,1,10,7],[6]]],[[5,[5,3,2,8],1,10,[6]],0,9,6],[[],9,9]]
[[[4,8],7,[[10],7,[7]],[[4,10,10,3,4],[10,0],1,[]],5],[4,5],[[[8,2],6,10],[],[6,4,3]]]

[[5,1,5],[[5,[5,6],5,[3,1]]],[7,[[],[]]]]
[[],[[8,[],[7,4],[9,6,10,10]],1,10,[],6],[8,3,8,5],[6],[]]

[[3,[10],[8],[[]],3]]
[[[5,7],3]]

[[],[],[],[],[[],[[2,1,6,0],[9,1,4,0,3],3,10],10]]
[[2,4,[]],[7],[[2,0,[7],[10,0,8,6,5],[0,1,5]]],[],[[7,1,5,[0,9]],7,[[2,8,5,9]]]]

[[],[[3,[6],[6],9,[9,10]]],[[[9,6,5,4]],[],4,6,7],[],[[5,[5,7,6],[6],10],10,0,[[3,3],7,[3,10,1,7,3]]]]
[[[]]]

[[[2,[0,10,3,0,3],5,6],1],[[[10,4,9],7,[5,4],[1,4,2,7,6],2],[[5,5],[10,1,10],[0,9,0],9],[[9],[2],0,2],7,[[10,3,6,6,10],[8,0,8,2]]],[4,1,[4,[5,5,4],[4],[10,9,6,1]],2,[[8],[],[3,7,7],[]]],[7,[[4,0,6,2,7],[4,3,3]],7,0]]
[[7],[[],4],[[],[[1,6,6,10,8],5,3,5,6],8,0,[[]]],[],[3,[10,8,9,[5],[0,0]],3,[9]]]

[[9],[[],1],[[[8,7,8],1,3],[3,[8,4,10,5],[7,6,5]],3,1,[7,[],[9,5,7,4,5],[2],1]],[10,[[5,3,10],9,4],9,7],[7,1,9]]
[[[0,[7],[6]],[[2,8,0,0],[2,0],2,[5,9,7,2]],9,[],[4,4,7,1,[7,4,8]]],[],[2,9,1,6]]

[[[8,[],1],5,5,[7,9,[4,10,9],2,8]],[],[],[6],[[[7,3,1,9]],[0,[]],2,4,7]]
[[[0,9,[9]],3,[7,[],9,[]],9],[],[[1,7,7,[10,7,5,2]],[7,[5,1],1,[6,10,1],10],[[10,6,5,10,10]]],[2],[8,9,4,[[],[3,5]]]]

[[[[],[]],[8,1,[10,6],8,[8]],[[9,7,10],6,4,6],[3,3],3]]
[[0],[[6],[0,3,4,9],[[5,2,0,10],6]]]

[[[[7,10]],[3,[6,7],[6,0,4,7],7,[6,10,1]],0]]
[]

[[],[[7,9,3],[],[5,[9,4],9,4],9],[10,[2,10,3,[0,2,5,8],[5,0,10]],[3,[]],3,6]]
[[4]]

[[],[[[],[0,5],[7,8,2,6],6]],[1]]
[[[8,[0,0],8,10,8],5,[8,2,[10,5,5,5,6],10],[[0,10,8,0],3,[8],7],5],[[],0],[[[],[],8,1,[5,0,4]],6,[[1,7,8,10,4],8],[]]]

[[10,10,5,6],[[7,[3,6,1,5,9],[3],[1,6,6,7],[3]],2,[[8,6,7],[6,9,0,7],[10,4,8],[9,1,6,4,10],0],8,[[10,10,6],[],4]],[2,[7],[1],[4,[4,4]],[[],0,[2,7,4,1]]],[],[[],2,8,2]]
[[[],[5,[10,5],[3],1,[4,2,1]],5,[9,5,7],10],[[1,[]],0,7,[]]]

[[0,10,[[],2,1,5]],[[[0],0,[6,6,0,2,10]],[9]],[8,7,4,3],[4]]
[[8,[]],[8],[1,[[6,10,7,9],[],3],6,10],[[[2,3,2],1,2,5,6],4,[],6,9],[[[2,10,4,9,3],[2,6,8],[5,5],4],8,[]]]

[[2,1,[[8,9,10],[]]],[[9,4,4],4,[0],2]]
[[[6,0,[],[10,2,7,1]],[[8,2],4,10],3,10],[[[7,0],6],[4,2,[]]]]

[[],[8],[[[10,0,1],[10,0,6],[3],[3,10,10,4,3],5]]]
[[9,3]]

[[0,[]],[9],[0,[[8,8,4,3,7],[10,2,1,6,1],[6,4,6,5]],[8,4,[5,8,5,5,3],7]]]
[[1,[[5,7,8],[10],[3,0,9,0],7,[1,3,3,0,7]]]]

[[[[1],3,[3]],[[10],1],7],[]]
[[],[],[[[],[1,1,0,6],7,[3,10,9]],2,[5,[],9,2,2],[[5,3,4,10],[0,1]]],[[]],[8]]

[[5,9,[0,[6,1,10,3,3],4],[[5,0],[],3,[]]],[7,10,[7,5,[10]],9,[1,0]],[5]]
[[10,[[10],[],[10,9],7],[4],[4]]]

[[5],[[],6]]
[[9,[]],[[[9,6,5,0],[6,10,5,6]],8,[10,5]],[0,[3,[8,9,1,6]],[0,[4,0,0,2,2]],8],[5,3]]

[[[3,3,7,6,0],3],[4,[7,[9,0,6,10,3],[1]]],[[7,[5,0,2,10,2],3]],[]]
[[[[5,3,0,8],[]]],[],[[[1,7,5,6,4],[10,10],[]],2],[[[6,0,6,4],9],3,[[7,1],1,6,10,[3,5,3,8,6]]]]

[[],[0,1,[[2,8]],1]]
[[[[8,3,7,8],7,6,[6,8,1,5]],[4,8,10,3],[0],[9,8,[6,2,5,4]]],[3],[1,[],[[]],4,10],[2,9,0]]

[[3],[6],[1,[3,[6,0,10,6,8]],8,6,0],[8,[[1,7],[],[1,0,4,7,1],8,[5,3,0,3]],[],[[5,2],3,[10,3,5,4,4],[9,6,5,6,3]]]]
[[[[],7],7],[9,10,[[],[2,8,0,3],8,[10,0,1,7,2]],[]],[0,[[],[1],[9,7],5]]]

[[[],5,0,0,7],[2,[[2,5,7,0],[8],[4,3,9]],[1]],[1,[2,6,[2]],[2,[9,7]]],[7]]
[[8,[1,6,[9,0,4,7],4]],[[],[[1,8,9,6],3,[1,10],[10],4]],[]]

[[3,3,[[9]],8]]
[[9,4,8,0],[6,8,7,7,[]]]

[[4,[],3,[3,[6,2]]],[[2,[7,10,10,6,0],8,5],[[3,9,9,9],5,[8,8,4,9],8],3],[[[8,4,3,2,2],5,0,[3,8]]],[[8,[3,8,3],[7,9,8],8,0],[10]],[8,3,[8],[[8,3,1,1,3],9,[6]],8]]
[[],[9,[7,2]],[[[0,6,6],[7,10],1],[10],[],[[],10,5]],[1,1,9],[1,[8],5]]

[[[5],0,[],[[3,4,9,3,0],[8,5]]]]
[[[[8,5],[3]],10,[[7,7,2,7],[7,0,7,10,3]],[3,[],9,6],[[],4,[6,2,0,10],[0]]],[4,1,[8,[],8,10,9],9,10]]

[[[1,6,[0]],[[]],9,[[1],[1,3,1,7],[2,10],7,[]]],[7,[4,0,10,9,8],3,6],[[2]],[]]
[[],[10,5]]

[[1,[[9,10,7],[]]],[1,[8],3,3],[8,[[8,9],0,[10],[8,5,8]]],[7,[8,[0,7,3,1,9],[],[10,4,8]],[[4,10],9,8],[7,[],[5,4],[]]]]
[[],[8],[10,7,[],[0,[],3,[1,9]],[5]]]

[[8,[[2,7,0,3],[8,2,1],6],2,7],[],[[[1,4,5,2,2]],3,[[9],5,0]]]
[[1,4,[10,[2,4,0,2]],[]],[6,7,6,[[2,3,4]]],[[[4,2,7,7,0],[2,1,10],7],[[],10],[7,[],6,9],3,6]]

[[[10,8,4,[8,7,9,3,4]],[3,5,[0,10,6,8]]]]
[[[[10],[1,9,1,5]],[[5,8],[3,4],[9,3,0]],3],[9,[],9,9,5],[9,[3]],[]]

[[5,[[4,6,5,1,5]]],[[[],6,7]],[[[9,8,2],10],2,3,8],[[5,7,3,[2,3,2,0,1],2],[],10,[9,1,3,6,0],5],[1,[]]]
[[6,2,[[],[9,3,0,5,6],[],2,[0,8,0,8,8]]],[9,6,[1]]]

[1,1,0,6,1]
[1,1,0,6]

[[[10,[5,1],[5,6,10,1,3],2,6],7,2],[[3],7,[4,7],2,[[0,1],1]]]
[[4,9,4]]

[[[[6,5,1],2,5,7],[[],[8,0],9,[9,7]]],[],[]]
[[[9,8],8],[9],[[7,8,6,[3]],[9,[10,6,2,9],[9,5,3]],[2,[0,0,8,5,0],5]],[0,[]]]

[[],[],[0,7,[[10,2,1,0,7]]],[[6],5,[[5,8,4],[]],[10,[7,4],[2,10,8],3],[[1,10],[],1,[7,6,10]]],[[],0]]
[[8,[[],[3],8,[1,9,1,1,0],7],[[6],0,[6,8,8],10]]]

[[4],[6],[4,[[3,10,6,3],6,[],1,5],[]],[[[0,8,0,4,3],[9],0,[7],7],5],[10,9,3]]
[[1,4,10,[4,[8,3,6,6,6],0,8,[6,7]]],[[2,[]],8,[],5]]

[[],[0,[[8,6],6,[8,9]],[[5,9,3],[5],1,[],[5,4]]],[3],[],[[5,0,0,7],[9,0,[8,3,10,6],10]]]
[[10,[[8,4],[5,6,0,7,9],0,2],7],[[1,3,[2,6,8,3]],9]]

[[],[[[1,9,0,7,10],8,[4,1,8,3,7]]],[6],[]]
[[6,2]]

[[2,1,[]],[3,[],[],[0,[5,3,9],[],3]],[8,0,7,[[9,7,3,5]],[[1],6,3,[4,10,0]]]]
[[[[9,1,10,3]],[],[1,[10],[3,0,10],[]],6]]

[[[[0,4],[],[1]],7,[7,10,5,[10,8],0],[[]]],[1,[],9,2,[[1,8,0,7,9],[8,4,8]]],[[6,4,[],[7],6],[[10,5],2,[4,2],[5,4],[8]]],[[],[7,[1,1,7,9]],7,6]]
[[7,5],[[9,4,8]]]

[[[],[[7,10],[2,5,3,6],[3,7,6,9,10],[2,0]],7,9,[[],1,0,[3]]],[[[1,8,3,4],3,5,[6]],9,7,6,[3,9]],[8,2],[4],[10,[],[[5,0,7,10]],1,[[0,2],[1,5,8],[],10,5]]]
[[2,6],[[7,[7,3,6,9,9]],[4,2,[2,2,1],1],[],[],[[],3,4,3]],[5,2,9,6]]

[[5,[5,[1,2,5],[7]],[[8],4],[4,2,0,[4]],10]]
[[],[10]]

[[[0,1,[6,7,3,10,1]]],[7,[4,[],[]],[5,[4,9,0],3],2,2],[],[],[8,[1]]]
[[7,4,[[0,6],3,4,4],1],[],[[[],[8,5],7]]]

[[[[4,3,3,4],7],[2]],[[],9,[8,7,[7,6,6,6,9],3,3]],[0,[2,[9],7],[[2,4,2,9],[9,8,3,7],3],8],[[]],[[[],8,2],[[2,3,4,8,9],2],9,[1,10,[2,2,5,2,8],2]]]
[[[10,[6,0,9,8,3],4,[]],5,0,[7,1,3,3,0],8],[[4,0,[7,3,1,10]],8,4]]

[[[6,[8,2,0,5],2,1,[7]],3,6,7,[[0,9,10,3],10,1,5]],[],[[7,[],[8],[0,9,9],1],[10,[8,8]]],[[[],[5,8,6,10]],[[0,10,8,8],[7,7],0,0]]]
[[7,[[4,1,6],[],[3,0,10,8]],[[0,9],[4],[7],[6,3,2]]],[],[[4,[5]],[[4],10],8,[]],[[[0,2,3,10],0,4,[2,5]]],[9,0]]

[[[[7,10],[],[2,3,9,9]],[[],[2,1,3]],0,7,0],[],[7,[3,9,2,[]],[]]]
[[8],[2],[[[10,7]]],[8,[[9,8,7,9],1,[5,5,9,4,0],9,[0,7,7]],[[6],[3,6,9,5,5],6],[]],[[]]]

[[[[],[],3,0,2],[0,3,6],8,7],[4]]
[[8,7,4],[[],7,[],[[1,2,10],0]],[[[7,6,4,1]]]]

[[[8,[7,7,2,5,7],8,[9,1,9,3],[8,7,4,1]],0,[],3]]
[[6,7,[[9],[6,4,0,4],[4],[10]]],[[7],[[],6,[10],[],[7,2,4,1]],[[4,7],[7,9,6,9]],[[],[],[]]],[10],[8,[10]]]

[[[[],1],8],[],[5]]
[[10,5,[8,[6,10],8,10,[9,0,3,9,8]],[9,[3,4,1,2],[6,0,3,0,6],1],8],[[6,[3]]],[]]

[[9,[10,2,6,4]],[0,[[5,7,9,1],[6,10]],[[10,1,1,0],[1,4,2,3,6]],[]],[]]
[[6],[0,[[1,6,2,0,5],8,[3,6],1,[10,4,5,2]],6,3,[7,3,[],[8,5],9]],[[],[[6,2,4],5,[10,10],6]]]

[[[0,6,[6,7,5],[]],[[7,7,0,7,9],[],[6,7,10,4,5],6,[]]],[[[8,3,10,8,2]]],[7,[[2,6,5]],2,3,[[]]],[7]]
[[[],[],[[6,2,5],[7,9,5],[0,4,2,5],6,8],[10,0,[4,2],[9,7,5]],[]]]

[[1,5],[0,6,[[7,4,2,9],5,[2,2]]]]
[[3,2,10],[]]

[[[6,[0,5],[],[3,2,4]]],[2],[[[0],[7,3,3,10,0],2]],[[[],[],5,4],[[7,8,3]],[8,[0],8]]]
[[0],[1],[5],[1,[[3,9,9,3],5,5,1,1],4,[4,0],10]]

[[[[7],[4,2,6],8],[9],[1,3,2]],[[7,[7,10,3,1],[1,10,2],4,[0]]],[0],[[9,[4,9,8,2],[0,8,8,4,9],[],[]],[[10,2,2],2,[3],[2,8],10],[9,0,[2,6,3,4,7]],[4,[5,7,1,7],[10,9,5,0,0],[9,3,0,8,7],8],2],[]]
[[0],[7,[],3],[]]

[[4,[[8,0],3,[0,1]],[1,6],[7,[0,6],9],1],[],[[[6],[9,4,4,9,10],7,[9],[6]],6,5,[[],[1,4,6],[0,0,3,5],[6,1,6,9,7],[8,4,8,3]]],[0,6,[[1],8,[10,4,1],7],[[3],8,[3,2],[6]]],[7,[6],7]]
[[],[9,[[5,0,3,4]]],[[[]],7,[10]]]

[[8,[9,9,1],[1,7,1,10],[[7,6,7,2,6],9,4]],[[[1,1,2],[4,8],9,7,[7,6]],8,6,[[],4,[]],4]]
[[0,10,7,[],[]]]

[[[[7,2,1,9]]],[4]]
[[[[10,1,6,8,2],[4,9,7,4],1],[],2,[],10],[],[[[8,7],[7],3,[6],7],4,4],[1,4,[8,[3]],[7],3],[[8,6,[2,2,9,4,9],9],[7,[0]]]]

[[[[6,0,7,10]],9,[[3]],[[]],10],[],[[9,[10,4,3,9]],3,6,10,[10,[],[4,0,8]]],[2,5],[1]]
[[[[8,8],[2,7],[],7,[0,10,0,3]]]]

[[[10,10,0,6]]]
[[4,9],[3,10,[[4,0,3,10,1],7,10,3,[6,1,8,10]]],[],[3,1,10,[]]]

[[[7,2,4,[8],4],0,[10]],[],[[[5,5,7],1,[6,4,9],[1,4,2]],[[6,5,9,2],[0,4,6,5],[],6,[8,5,9,9,0]],[[8,5,9],[9,3],[3,4],[9,8,1,0,6]],[[3,3,8],[6]]]]
[[[5]],[]]

[[],[[[2,2,8,9,6]],[0,9],2,8]]
[[8,7],[1,1]]

[[[5,10]],[7,4,[[3,5,5],[9]],1,8],[],[],[[],[[5,3,5],[8,4,10,7],6]]]
[[],[[1,[3,9,5,0],5,5]],[]]

[[],[]]
[[1,1,1,[[8,3],6,[5,0],[0,5,7],[3,8]]],[[[7,7,7],[7,3],4,3]],[10,5]]

[[[],6,4,[1,8,7,4],1],[4,8,[[],4,[10,2,7,2],10,[]]],[[[10,7,0],10],[10]]]
[[[2,[6],1,5,[8,0,10,2,2]],[[3,4,6,8,5]],5],[[0,[2,6,0,0],[3,6]]]]"""

run(SAMPLE)
run(PUZZLE)